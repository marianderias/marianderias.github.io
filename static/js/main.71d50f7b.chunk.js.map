{"version":3,"sources":["components/Cursor.js","components/NavButton.js","components/Navbar.js","components/TypeWriter.js","components/BotButton.js","components/TaskBar.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Cursor","_ref","x","y","react_default","a","createElement","className","style","top","left","NavButton","name","clickLink","href","Navbar","src","alt","components_NavButton","download","TypeWriter","color","index_es","sequence","repeat","Infinity","BotButton","image","target","rel","TaskBar","components_BotButton","Home","_useState","useState","_useState2","Object","slicedToArray","cursorPos","setCursorPos","useEffect","mousemove","e","clientX","clientY","window","addEventListener","removeEventListener","components_TypeWriter","components_Navbar","components_Cursor","components_TaskBar","App","components_Home","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.71d50f7b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/*Very simple custom cursor to be styled */\r\nconst Cursor = ({x, y}) => {\r\n  return (\r\n    <div className='cursor' style={{top: y, left: x}}>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cursor;\r\n","import React from 'react';\r\n\r\nconst NavButton = ({name, clickLink}) => {\r\n  return (\r\n    <div className=\"navButton\">\r\n      <a href={clickLink} ><button> {name} </button></a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavButton;\r\n\r\n","import NavButton from \"./NavButton.js\";\r\nimport React from 'react';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"navBar\">\r\n      <img src=\"/public/my face.jpg\" alt=\"Marian Derias\"/>\r\n      <div className=\"buttonBar\">\r\n        <NavButton name=\"Home\"/>\r\n        <div className=\"navButton\"><a href=\"/public/Marian Derias Resume.pdf\" download><button>Download my Resum√©</button></a></div>\r\n      </div>\r\n    </nav>\r\n    \r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport {TypeAnimation} from 'react-type-animation';\r\n\r\n/* This component is for the middle section of the website*/\r\nconst TypeWriter = () => {\r\n\r\n  // These are the strings I'm using for the type writing in the middle of the screen. 'The react-type animation module' I'm using does not allow these to be changed.\r\n  const typed = [\"Programmer\", 2000, \"Web developer\", 2000, \"Student\", 2000, \"Your new employee\", 2000];\r\n  return (\r\n    <div className='typeWriter'>\r\n        <div className=\"greeting\"><h1 style={{color: 'white'}}>Hey!&nbsp; I'm &nbsp;</h1><h1 className='myName' style={{color:'#E6B0EB'}}>Marian &nbsp;Derias</h1></div>\r\n        <div className='typist'>\r\n          <TypeAnimation\r\n          sequence= {typed}\r\n          repeat={Infinity}\r\n          />\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TypeWriter;\r\n","import React from 'react';\r\n/*Buttons at the bottom of the home page */\r\nconst BotButton = ({image, clickLink}) => {\r\n  return (\r\n    <div className=\"botButton\">\r\n        <a href={clickLink} target=\"_blank\" rel=\"noopener noreferrer\"><img src={image} alt=\"social media icon\"/></a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BotButton;\r\n","import BotButton from \"./BotButton\"\r\nimport React from 'react';\r\n\r\nconst TaskBar = () => {\r\n  return (\r\n    <div className=\"taskBar\">\r\n      <div className=\"botBar\">\r\n          <BotButton clickLink=\"https://github.com/Dermar\" image=\"/public/github_logo.png\"/>\r\n          <BotButton clickLink=\"https://www.linkedin.com/in/marian-derias-92a71a259/\" image=\"/public/linkedin_logo.png\"/>\r\n          <BotButton clickLink=\"https://www.facebook.com/marian.derias.96\" image=\"/public/facebook_logo.png\"/>\r\n      </div>\r\n      <div><p>Email me: </p><a className=\"link\" href=\"mailto:marianderias@gmail.com\">marianderias@gmail.com</a></div>\r\n      <p>Call: 0430927893</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskBar;\r\n","import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\nimport Cursor from \"./Cursor\";\r\nimport Navbar from \"./Navbar\";\r\nimport TypeWriter from './TypeWriter';\r\nimport TaskBar from \"./TaskBar\";\r\n\r\nconst Home = () => {\r\n  \r\n  const [cursorPos, setCursorPos] = useState({x:0, y:0});\r\n\r\n  // Check runs all the time to reset cursor position and add new message to 'typed' variables'\r\n  useEffect(() => {\r\n    const mousemove = (e) =>{\r\n      setCursorPos({x: e.clientX, y: e.clientY});\r\n    }\r\n    \r\n    window.addEventListener('mousemove', mousemove);\r\n    \r\n    return() => {\r\n      window.removeEventListener('mousemove', mousemove);\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      \r\n      <TypeWriter/>\r\n      <Navbar />\r\n      <Cursor x={cursorPos.x} y={cursorPos.y}/>\r\n      <TaskBar/>\r\n      \r\n    </div>\r\n    \r\n    \r\n  );\r\n \r\n}\r\n\r\nexport default Home;\r\n","import './Home.css';\r\nimport Home from \"./components/Home\";\r\nimport React from 'react';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport {createRoot} from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}